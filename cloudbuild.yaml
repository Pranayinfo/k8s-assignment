steps:
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: 'bash'
    args:
      - '-c'
      - "gcloud secrets versions access latest --secret=$BRANCH_NAME-${_APP_NAME} --format='get(payload.data)' | tr '_-' '/+' | base64 -d > .env"
  
steps:
  # Authenticate Docker with Artifact Registry
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'auth'
      - 'configure-docker'
      - 'us-central1-docker.pkg.dev'

  # Create Artifact Registry for frontend if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'artifacts'
      - 'repositories'
      - 'create'
      - 'frontend'
      - '--repository-format=docker'
      - '--location=us-central1'
      - '--description="Artifact Registry for frontend images"'
    timeout: "120s"

  # Create Artifact Registry for backend if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'artifacts'
      - 'repositories'
      - 'create'
      - 'backend'
      - '--repository-format=docker'
      - '--location=us-central1'
      - '--description="Artifact Registry for backend images"'
    timeout: "120s"

  # Build and push frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    dir: frontend
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/frontend/frontend:$BRANCH_NAME'
      - '--build-arg'
      - 'BACKEND_URL=http://backend-service:9000'
      - '--file'
      - 'Dockerfile'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/frontend/frontend:$BRANCH_NAME'

  # Build and push backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    dir: backend
    args:
      - 'build'
      - '--no-cache'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/backend/backend:$BRANCH_NAME'
      - '--build-arg'
      - 'ENV=${_ENV}'
      - '--file'
      - 'Dockerfile'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/backend/backend:$BRANCH_NAME'

  # Deploy frontend using Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_APP_NAME}-$BRANCH_NAME-frontend'
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/frontend/frontend:$BRANCH_NAME'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8000'
      - '--timeout=300s'
      - '--set-env-vars=BACKEND_URL=http://backend-service:9000'

  # Deploy backend using Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_APP_NAME}-$BRANCH_NAME-backend'
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/backend/backend:$BRANCH_NAME'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=9000'
      - '--timeout=300s'
      - '--add-cloudsql-instances=${_CLOUDSQL_CONNECTION_NAME}'
      - '--set-env-vars=POSTGRES_USER=d3vuser,POSTGRES_PASSWORD=admin123,POSTGRES_DB=d3v-db,POSTGRES_HOST=34.70.0.83,POSTGRES_PORT=5432'

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _REGION: us-central1
  _ENV: development
  _APP_NAME: d3v-app
  _SEVERITY: CRITICAL
  _CLOUDSQL_CONNECTION_NAME: feisty-return-438307-f5:us-central1:d3v-db

timeout: "1200s"
